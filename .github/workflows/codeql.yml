# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL and Dependency-Check"

on:
  workflow_dispatch: # 可以手動執行此 action

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: autobuild
          - language: javascript-typescript
            build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
      # 1. 檢查出代碼庫
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安裝 Java 環境
      - uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: "21"
          cache: "maven"

      # 3. 初始化 CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # If the analyze step fails for one of the languages you are analyzing with
      # "We were unable to automatically build your code", modify the matrix above
      # to set the build mode to "manual" for that language. Then modify this step
      # to build your code.
      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      # 4. 構建項目（CodeQL 需要編譯後的代碼進行分析）
      - name: Build with Maven
        run: mvn clean install -DskipTests # 編譯項目，跳過測試以加快速度

      # 5. 執行 CodeQL 分析
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-check:
    name: Dependency-Check Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      # 1. 檢查出代碼庫
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安裝 Java 環境
      - uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: "21"
          cache: "maven"

      # 3. 構建項目（可選，加快 Dependency-Check 掃描）
      - name: Build with Maven
        run: mvn clean install -DskipTests
        continue-on-error: true # 若構建失敗仍繼續掃描

      # 4. 執行 Dependency-Check
      - name: Run Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Dependency-Check"
          path: "."
          format: "html"
          out: "reports" # this is the default, no need to specify unless you wish to override it
          args: >
            --format "sarif"
            --failOnCVSS 7
            --enableRetired
        env:
          JAVA_HOME: /opt/jdk

      # 5. 上傳 Dependency-Check 結果
      - name: Upload Dependency-Check reports
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: reports/
        continue-on-error: true # 若檔案不存在仍繼續

      - name: Upload Dependency-Check SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-check-report.sarif
        continue-on-error: true # 若檔案不存在仍繼續
